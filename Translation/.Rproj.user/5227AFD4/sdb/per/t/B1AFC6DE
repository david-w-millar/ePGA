{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(shinyBS)\nlibrary(rmarkdown)\nlibrary(VariantAnnotation)\noptions(shiny.maxRequestSize=30*1024^2) \noptions(stringsAsFactors=FALSE)\n\n#run only if tables or genotypes have changed\n#source(\"R/translate.R\")\n\n#code that runs per user\nsource(\"R/translateCustom.R\")\nsource(\"R/analysis.R\")\n\nshinyServer(function(input, output, session){\n  \n  #Change the selected tab depending on input \n  observe({\n    if(input$goButton>0)\n    {\n      if(is.null(input$file))\n        updateTabsetPanel(session, \"tabs\", selected = \"tabF\")\n      else \n        updateTabsetPanel(session, \"tabs\", selected = \"tabC\")\n    }\n  })\n  #generate report for full translation\n  output$downloadReport1 <- downloadHandler(\n    \n    filename= \"eMoDiA-report.pdf\",\n    \n    content = function(file) {\n      library(rmarkdown)\n      inputEnv <- new.env() \n      inputEnv$df <- loadFULL()\n      #delete recommendations\n      inputEnv$df[,5] <- NULL\n      out <-rmarkdown::render(\"report.Rmd\", \"pdf_document\", envir = inputEnv)\n      file.rename(out, file)\n    },\n    \n    contentType = 'application/pdf'\n  )\n  #generate report for custom translation\n  output$downloadReport2 <- downloadHandler(\n    \n    filename= \"eMoDiA-report.pdf\",\n    \n    content = function(file) {\n      inputEnv <- new.env() \n      inputEnv$df <- loadCustom()\n      out = rmarkdown::render(\"report.Rmd\", \"pdf_document\", envir = inputEnv)\n      file.rename(out, file)\n    },\n    \n    contentType = 'application/pdf'\n  )\n  \n  loadFULL <- reactive ({ \n    phase <- input$gen\n    \n    outFile <- paste(\"output/\", \"emodia\", phase, \".match\", sep=\"\")\n    \n    withProgress(message = 'Loading...', value = 0, {\n      \n      df <- read.table(outFile, header=T, sep=\"\\t\", comment.char=\"\", quote=\"\")\n      #filter out NO_MATCH & NO_INFO\n      df <- df[!(df$phenotype==\"NM\"),]\n      df <- df[!(df$phenotype==\"NI\"),]\n      row.names(df) <- NULL\n      \n      print(\"dataset loaded..\")\n      \n      incProgress(0.3, detail=\"Dataset loaded\")\n      Sys.sleep(0.1)\n      \n      checkRec <- read.table(\"data/genes_alleles.txt\", sep=\"\\t\", header=T, comment.char=\"\", quote=\"\")\n      checkRec <- checkRec[!duplicated(checkRec),]\n      checkRec <- split(checkRec, checkRec$Gene)\n      \n      #create URL links  to explore recommendations\n      #only for diplotypes that exist in explore\n      links <- apply(df,1,function(r)\n      {\n        gene <- strsplit(r[2], split=\"_2\")[[1]]\n        checkRecGene <- checkRec[[gene]]\n        diplotype_rev <- paste(rev(strsplit(r[3],\"/\")[[1]]), collapse=\"/\")\n        if( r[3] %in% checkRecGene$Alleles ){\n          diplo <- URLencode(gsub(\"/\",\"&\",r[3]),reserved = T)\n          link <- paste(\"http://139.91.210.31/explore\",gene,diplo,sep=\"/\")\n        }else if( diplotype_rev %in% checkRecGene$Alleles){ #due to string matching, diplotypes may be reversed ex. *9A/*1\n          diplo <- URLencode(gsub(\"/\",\"&\",diplotype_rev),reserved = T)\n          link <- paste(\"http://139.91.210.31/explore\",gene,diplo,sep=\"/\")\n        }else if( gene %in% c(\"ZNF804A\",\"TMCC1\",\"LECT2\",\"OR52J2P,OR52J3\",\"OR52E2\",\"SCN8A\",\"ASIC2\")){\n          link <- \"https://www.pharmgkb.org/pmid/21961650\"\n        }else\n          link <- \"\"\n      })\n      print(\"Links created..\")\n      \n      incProgress(0.3, detail=\"Links created\")\n      Sys.sleep(0.1)\n      \n      idx <- links == \"\"\n      Recommendations <- paste0(\"<a href='\",  links, \"' target='_blank'>Check</a>\")\n      Recommendations[idx] <- \"Not Available\"\n      \n      incProgress(0.4, detail=\"Done\")\n      Sys.sleep(0.1)\n      \n      print(\"END OF FULL\")\n      \n      df <- cbind(df,Recommendations)\n      \n    })\n  })\n  \n  #FULL Translation  \n  output$full <- renderDataTable({\n    \n    if (input$goButton == 0){\n      validate(\"Please click on the 'Go' button to start the translation process\")\n      return()\n    }\n    \n    print(\"FULL\")\n    \n    df <- isolate(loadFULL())\n    \n  },\n  options = list(pageLength = 10, \n                 rowCallback = I(\n                   'function(nRow, aData) {\n                   if (aData[3] == \"WT/WT\"){\n                   $(\"td:eq(3)\", nRow).html(\"\");\n                   $(\"td:eq(3)\", nRow).css(\"background-color\", \"green\");\n                   }\n                   if (aData[3] == \"WT/Var\"){\n                   $(\"td:eq(3)\", nRow).html(\"\");\n                   $(\"td:eq(3)\", nRow).css(\"background-color\", \"yellow\"); \n                   }\n                   if (aData[3] == \"Var/Var\"){\n                   $(\"td:eq(3)\", nRow).html(\"\");\n                   $(\"td:eq(3)\", nRow).css(\"background-color\", \"red\");          \n                   }\n                }'),\n                 autoWidth = T,\n                 columnDefs = list(list(targets = 3 , searchable = F , orderable = F), list(targets=4, searchable=F)),\n                 dom= \"lrtip\", info=TRUE\n  ),\n  escape=c(4) )\n  \n  loadCustom <- reactive({\n    \n    file <- input$file$datapath\n    phase <- input$gen\n    df <- translateCustom(file,phase)\n    \n    validate(need(df,\"No diplotypes matched based on this actionable SNPs' file!\"))\n    \n    print(\"custom translation done\")\n    #filter out NO_MATCH & NO_INFO\n    df <- df[!(df$phenotype==\"NM\"),]\n    df <- df[!(df$phenotype==\"NI\"),]\n    \n  })\n  \n  #Custom Translation\n  output$actionable <- renderDataTable({\n    \n    if (input$goButton == 0){\n      validate(\"Please upload an actionable file and then click on the 'Go' button\") \n      return()\n    }\n    \n    print(\"CUSTOM\")\n    \n    isolate({\n      file <- input$file$datapath\n      validate(need(file, \"Please upload an actionable file and then click on the 'Go' button\")) \n    })  \n    \n    withProgress(message = 'Loading...', detail = \"This may take a while...\", value = 0, {\n      \n      df <- isolate(loadCustom())\n      \n      incProgress(0.5, detail=\"Translation done\")\n      Sys.sleep(0.1)\n      \n      checkRec <- read.table(\"data/genes_alleles.txt\", sep=\"\\t\", header=T, comment.char=\"\", quote=\"\")\n      checkRec <- checkRec[!duplicated(checkRec),]\n      checkRec <- split(checkRec, checkRec$Gene)\n      \n      #create URL links  to explore recommendations\n      #only for diplotypes that exist in explore\n      links <- apply(df,1,function(r)\n      {\n        gene <- strsplit(r[2], split=\"_2\")[[1]]\n        checkRecGene <- checkRec[[gene]]\n        diplotype_rev <- paste(rev(strsplit(r[3],\"/\")[[1]]), collapse=\"/\")\n        if( r[3] %in% checkRecGene$Alleles ){\n          diplo <- URLencode(gsub(\"/\",\"&\",r[3]),reserved = T)\n          link <- paste(\"http://139.91.210.31/explore\",gene,diplo,sep=\"/\")\n        }else if( diplotype_rev %in% checkRecGene$Alleles){ #due to string matching, diplotypes may be reversed ex. *9A/*1\n          diplo <- URLencode(gsub(\"/\",\"&\",diplotype_rev),reserved = T)\n          link <- paste(\"http://139.91.210.31/explore\",gene,diplo,sep=\"/\")\n        }else if( gene %in% c(\"ZNF804A\",\"TMCC1\",\"LECT2\",\"OR52J2P,OR52J3\",\"OR52E2\",\"SCN8A\",\"ASIC2\")){\n          link <- \"https://www.pharmgkb.org/pmid/21961650\"\n        }else\n          link <- \"\"\n      })\n      \n      print(\"links created..\")\n      \n      incProgress(0.3, detail=\"Links created\")\n      Sys.sleep(0.1)\n      \n      idx <- links == \"\"\n      Recommendations <- paste0(\"<a href='\",  links, \"' target='_blank'>Check</a>\")\n      Recommendations[idx] <- \"Not Available\"\n      \n      incProgress(0.2, detail=\"Done\")\n      Sys.sleep(0.1)\n      \n      print(\"END OF CUSTOM\")\n      \n      df <- cbind(df,Recommendations)\n      \n    })\n    \n  },\n  #number of rows to display\n  options = list(pageLength = 10, \n                 rowCallback = I(\n                   'function(nRow, aData) {\n                   if (aData[3] == \"WT/WT\"){\n                   $(\"td:eq(3)\", nRow).html(\"\");\n                   $(\"td:eq(3)\", nRow).css(\"background-color\", \"green\");\n                   }\n                   if (aData[3] == \"WT/Var\"){\n                   $(\"td:eq(3)\", nRow).html(\"\");\n                   $(\"td:eq(3)\", nRow).css(\"background-color\", \"yellow\"); \n                   }\n                   if (aData[3] == \"Var/Var\"){\n                   $(\"td:eq(3)\", nRow).html(\"\");\n                   $(\"td:eq(3)\", nRow).css(\"background-color\", \"red\");          \n                   }\n              }'),\n                 autoWidth=T,\n                 columnDefs = list(list(targets = 3 , searchable = F , orderable = F), list(targets=4, searchable=F)),\n                 dom= \"lrtip\"\n  ),\n  escape=c(4))\n  \n  output$genes <- renderDataTable({\n    \n    if (input$goButton == 0)\n      return()\n    \n    phase <- isolate(input$gen)\n    \n    outFile <- paste(\"output/\", \"emodia\", phase, \".match\", sep=\"\")\n    \n    df <- analysis(outFile, 0)\n  },\n  options = list(pageLength = 10,\n                 rowCallback = I(\n                   'function(nRow, aData){\n                    $(\"td:eq(3)\", nRow).css(\"background-color\", \"green\");\n                    $(\"td:eq(4)\", nRow).css(\"background-color\", \"yellow\");\n                    $(\"td:eq(5)\", nRow).css(\"background-color\", \"red\");\n                  }'),\n                 dom= \"lrtip\"\n  ))\n  \n  output$samples <- renderDataTable({\n    if (input$goButton == 0)\n      return()\n    \n    phase <- isolate(input$gen)\n    \n    outFile <- paste(\"output/\", \"emodia\", phase, \".match\", sep=\"\")\n    \n    df <- analysis(outFile, 1)\n  },\n  options = list(pageLength = 10,\n                 rowCallback = I(\n                   'function(nRow, aData){\n                   $(\"td:eq(1)\", nRow).css(\"background-color\", \"green\");\n                   $(\"td:eq(2)\", nRow).css(\"background-color\", \"yellow\");\n                   $(\"td:eq(3)\", nRow).css(\"background-color\", \"red\");\n                }'),\n                 dom= \"lrtip\"\n  ))\n  \n  # output$summary <- renderUI({ \n  #   \n  #   if (input$goButton == 0)\n  #     return()\n  #   list(\n  #     h4(\"Summary\"),\n  #     pre(includeText(\"Data/summary.txt\"))\n  #   )\n  # })\n})",
    "created" : 1465548287268.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "17|11|25|2|\n31|30|39|4|\n48|30|53|4|\n",
    "hash" : "2447731369",
    "id" : "B1AFC6DE",
    "lastKnownWriteTime" : 1466428134,
    "last_content_update" : 1466428155436,
    "path" : "C:/Users/ekartsak/Dropbox/Work/June '16/Translation_Desktop/server.R",
    "project_path" : "server.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}